name: Trigger Create Release

on: 
  workflow_dispatch:
    inputs:
        target_workflow:
            description: 'The filename of the workflow to trigger'
            required: true
            default: 'createrelase_local.yml'
        ReleaseName:
            description: 'Name of release. ex. Sprint 6 Close'
            type: string
            required: true
        DeploymentInstructions:
            description: 'Deployment Instructions'
            required: false
            type: string
            default: 'Include tickets if possible [https://eldermark.atlassian.net/browse/EMAR-582](https://eldermark.atlassian.net/browse/EMAR-582)'
        IncludePipelineMicroservices:
            description: 'Include default list of clinical microservices'
            type: string
            default: '          ### Microservices deployed:\n            \n          **Clinical Pipeline**\n          \n          - api-gateway\n          - assessment\n          - audit\n          - billing\n          - crm\n          - emar-sync\n          - eureka\n          - event\n          - housing\n          - mirth-service\n          - notification\n          - org\n          - resident\n          - rm\n          - web\n          \n          **EMAR Pipeline**\n          \n          - emar-cluster\n          - emar-data-api\n'
        ReleaseInfoFile:
            description: 'Release Info File'
            type: string
            required: true
            default: 'releases/ReleaseInfo.md'
jobs:
    # ToDo: use github api to get tags from each repository and calculate new tag. 
    # ToDo: Add concurrency
    trigger-create-release:
        runs-on: ubuntu-latest
        steps:
        - name: Get the date
          id: get-date
          run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
        - name: fetch tags on repos
          id: fetch-tags
          run: |
            echo "fetching tags"


            REPOSITORIES=("RobertPuffeEldermark/PowerShell" "LivTechCos/eldermark")
            GREATEST_TAG=0000.00.00.0000
            for REPO in "${REPOSITORIES[@]}" ; do
                TAG=$(curl -L -X GET \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.REPO_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/$REPO/git/refs/tags \
                | jq -r '.[].ref' | cut -d '/' -f 3)
                echo "Tag for $REPO is $TAG"
                echo "TAG_$REPO=$TAG" >> $GITHUB_OUTPUT
                if [[ $TAG > $GREATEST_TAG ]]; then
                    GREATEST_TAG=$TAG
                    echo "GREATEST_TAG=$GREATEST_TAG" >> $GITHUB_OUTPUT
                    echo "greater tag found $TAG"
                fi
            done
        
        - name: Calculate new tag
          id: new-tag
          run: |
            OLD_TAG=${{ steps.fetch-tags.outputs.GREATEST_TAG}}
            if [[ -z "$OLD_TAG" ]]; then
            echo "tag=${{ steps.get-date.outputs.date }}.0001" >> $GITHUB_OUTPUT
            else
            NUMBER=$(echo $OLD_TAG | awk -F. '{print $NF}')
            NEW_NUMBER=$(printf "%04d" $((10#$NUMBER + 1)))
            echo "tag=${{ steps.get-date.outputs.date }}.$NEW_NUMBER" >> $GITHUB_OUTPUT
            fi

        # Trigger Repository 1
        - name: Trigger Target Workflow - Powershell
          run: |          
            curl -L -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.REPO_TOKEN_RP }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/RobertPuffeEldermark/PowerShell/actions/workflows/${{ github.event.inputs.target_workflow }}/dispatches \
            -d '{"ref":"main","inputs":{"Tag":"${{ steps.new-tag.outputs.tag }}""ReleaseBody":"${{ inputs.ReleaseInfoFile }}","ReleaseName":"${{ github.event.inputs.ReleaseName }}"}}'
        # Repeat the above step for each repository

        # validate tag was created in all repositories
        - name: validate tag
          run: |
           
            REPOSITORIES=("RobertPuffeEldermark/PowerShell")
            for REPO in "${REPOSITORIES[@]}" ; do
                MAX_RETRIES=5
                RETRY_DELAY=5
                RETRY_COUNT=0
                while : ; do
                    TAG=$(curl -L -X GET \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${{ secrets.REPO_TOKEN }}" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    https://api.github.com/repos/$REPO/git/refs/tags \
                    | jq -r '.[].ref' | cut -d '/' -f 3)
                    if [[ $TAG != ${{ steps.new-tag.outputs.tag }} ]] || [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
                        break
                    else
                        echo "tag not created in $REPO, retrying in $RETRY_DELAY seconds"
                        sleep $RETRY_DELAY
                        ((RETRY_COUNT++))
                    fi
                done    
                if [[ $TAG != ${{ steps.new-tag.outputs.tag }} ]]; then
                    echo "tag not created in $REPO"
                    exit 1
                fi
            done
